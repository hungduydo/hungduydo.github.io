{"version":3,"sources":["serviceWorker.js","components/app/app.js","components/header/header.js","components/home/about/about.js","components/home/banner/banner.js","components/home/contact/contact.js","components/home/resume/resume.js","components/home/works/works.js","components/home/home.js","index.js"],"names":["Boolean","window","location","hostname","match","library","add","fab","App","className","Component","Header","menuItems","console","log","document","getElementsByTagName","this","map","item","i","key","About","data-anchor","Banner","socialLinks","icon","link","description","it","href","Contact","Resume","Works","Home","pages","Pageable","pips","animation","delay","throttle","swipeThreshold","orientation","freeScroll","id","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8DCXNC,IAAQC,IAAIC,K,IAESC,E,8NAMjB,OACA,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAT2BC,aCNpBC,G,MAAb,2MACEC,UAAY,CAAC,OAAQ,QAAS,SAAU,QAAS,WADnD,mFAIIC,QAAQC,IAAIC,SAASC,qBAAqB,SAJ9C,+BAQI,OAAQ,yBAAKP,UAAU,UACrB,4BAEIQ,KAAKL,UAAUM,KAAI,SAACC,EAAMC,GAAP,OAAa,wBAAIC,IAAKD,GAAID,YAXvD,GAA4BT,c,iBCDfY,G,MAAb,8NAOI,OACE,yBAAKC,cAAY,UAAjB,kBARN,GAA2Bb,c,QCEdc,G,MAAb,2MACEC,YAAc,CACZ,CAAEC,KAAM,aAAcC,KAAM,uBAC5B,CAAED,KAAM,WAAYC,KAAM,uBAC1B,CAAED,KAAM,QAASC,KAAM,uBACvB,CAAED,KAAM,SAAUC,KAAM,uBACxB,CAAED,KAAM,UAAWC,KAAM,wBAN7B,EASEC,YATF,6SAeI,OACE,yBAAKL,cAAY,SAASd,UAAU,UAClC,yBAAKA,UAAU,kBACZ,wBAAIA,UAAU,iBAAd,gBACH,uBAAGA,UAAU,gBACVQ,KAAKW,aAER,uBAAGnB,UAAU,kBAETQ,KAAKQ,YAAYP,KAAI,SAAAW,GAAE,OAAK,uBAAGC,KAAMD,EAAGF,MAAM,kBAAC,IAAD,CAAiBD,KAAM,CAAC,MAAOG,EAAGH,mBAxB5F,GAA4BhB,cCFfqB,EAAb,8NAOI,OACE,yBAAKR,cAAY,WAAjB,eARN,GAA6Bb,aCAhBsB,EAAb,8NAOI,OACE,yBAAKT,cAAY,UAAjB,mBARN,GAA4Bb,aCAfuB,EAAb,8NAOI,OACE,yBAAKV,cAAY,SAAjB,aARN,GAA2Bb,aCGdwB,EAAb,4LAGIjB,KAAKkB,MAAQ,IAAIC,IAAS,aAAc,CACtCC,MAAM,EACNC,UAAW,IACXC,MAAO,EACPC,SAAU,GACVC,eAAgB,IAChBC,YAAa,WACbC,YAAY,MAVlB,+BAeI,OACE,yBAAKC,GAAG,aACN,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,WArBR,GAA0BlC,aCE1BmC,IAASC,OAAO,kBAAC,EAAD,MAAS/B,SAASgC,eAAe,ST4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.148b710c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport { Header, Home } from '../index';\nimport './app.css';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\n\nlibrary.add(fab)\n\nexport default class App extends Component {\n  componentDidMount() {\n    \n  }\n\n  render() {\n    return (\n    <div className=\"app\">\n      <Header></Header>\n      <Home></Home>\n    </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport './header.css';\n\nexport class Header extends Component {\n  menuItems = ['Home', 'About', 'Resume', 'Works', 'Contact'];\n  \n  componentDidMount() {\n    console.log(document.getElementsByTagName('li'));\n  }\n\n  render() {\n    return (<div className=\"header\">\n      <ul>\n        {\n          this.menuItems.map((item, i) => <li key={i}>{item}</li>)\n        }\n      </ul>\n    </div>)\n  }\n}\n","import React, { Component } from 'react';\n\nexport class About extends Component {\n  \n  componentDidMount() {\n   \n  }\n\n  render() {\n    return (\n      <div data-anchor=\"Page 2\">\n        About work\n      </div>\n    );\n  }\n}\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { Component } from 'react';\nimport './banner.css';\n\nexport class Banner extends Component {\n  socialLinks = [\n    { icon: 'facebook-f', link: 'http://facebook.com' },\n    { icon: 'linkedin', link: 'http://facebook.com' },\n    { icon: 'skype', link: 'http://facebook.com' },\n    { icon: 'github', link: 'http://facebook.com' },\n    { icon: 'twitter', link: 'http://facebook.com' },\n  ];\n\n  description = `I'm a (Your City) based (Your Occupation Here). Here will be your description. Use this to describe what you do or whatever you feel best describes yourself to a potential employer.`\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <div data-anchor=\"Page 1\" className=\"banner\">\n        <div className=\"banner__wapper\">\n           <h1 className=\"banner__title\">Hi! I'm Hung</h1>\n        <p className=\"banner__desc\">\n          {this.description}\n        </p>\n        <p className=\"banner__social\">\n          {\n            this.socialLinks.map(it => (<a href={it.link}><FontAwesomeIcon icon={['fab', it.icon]} /></a>))\n          }\n        </p>\n        </div>\n       \n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport class Contact extends Component {\n  \n  componentDidMount() {\n   \n  }\n\n  render() {\n    return (\n      <div data-anchor=\"contact\">\n        Contact\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport class Resume extends Component {\n  \n  componentDidMount() {\n   \n  }\n\n  render() {\n    return (\n      <div data-anchor=\"resume\">\n        resume work\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport class Works extends Component {\n  \n  componentDidMount() {\n   \n  }\n\n  render() {\n    return (\n      <div data-anchor=\"works\">\n        Works\n      </div>\n    );\n  }\n}\n","import Pageable from 'pageable';\nimport React, { Component } from 'react';\nimport './home.css';\nimport { Banner, About, Resume, Works, Contact } from './index';\n\nexport class Home extends Component {\n  pages;\n  componentDidMount() {\n    this.pages = new Pageable(\"#container\", {\n      pips: true,\n      animation: 300,\n      delay: 0,\n      throttle: 50,\n      swipeThreshold: 150,\n      orientation: \"vertical\",\n      freeScroll: false,\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"container\">\n        <Banner></Banner>\n        <About></About>\n        <Resume></Resume>\n        <Works></Works>\n        <Contact></Contact>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport { App } from './components';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}